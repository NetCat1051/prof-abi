 Модуль 1. Подключение и настройка робота внутри сети полигона.
Проверка базовых пакетов сервисного робота

1.1. Поменять имя робота в сети (host) c имени по умолчанию (turtlebro0X) на 
имя вида turtlebroXX, где XX - номер, написанный на наклейке робота

            Подключаем SD карту робота через кард-ридер, в Windows ничего не
нажимаем, в Ubuntu, сверху (меню Virtual Box), во вкладке Устройства, 
USB, выбираем имя, начинающееся на Generic
            В разделе system (7.5 Гб), в папке etc, нажать ПКМ в свободном месте и
открыть директорию в терминале (Открыть в терминале или Open in
terminal), открыть файл командой sudo nano hostname и изменить номер 
робота. Выход из редактора - Ctrl+S, Ctrl+X. Таким же способом 
меняем номер робота в файле hosts

1.2. Настроить подключение робота к сети роутера-полигона, используя 
кард-ридер

В разделе boot (268 Мб), открыть директорию в терминале, создать файл
командой sudo nano wpa_supplicant.conf с содержимым, найти которое
можно в мануале (https://manual.turtlebro.ru/), в разделе Подключение
робота к Сети через SD карту:

ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
ssid="WIFI_NETWORK_NAME"
psk="WIFI_PASSWORD"
}

            Строки WIFI_NETWORK_NAME и WIFI_PASSWORD меняем на те, что в 
методичке

Вставляем SD карту в робота и включаем его. Если загорелись оранжевые диоды, значит, робот подключился к wi-fi. Снова вытаскиваем SD карту, смотрим  IP робота (раздел boot, папка configs, файл ifconfig.dump, IP начинается на 192.168.106.ХХХ)
Вставить SD карту в робота и включить его. 
В терминале подключаемся к роботу командой ssh pi@IP РОБОТА

	1.3. Продемонстрировать получение IP-адреса робота в сети роутера-полигона
		hostname -I

A2. Проверка базовой информации робота

    1. Продемонстрировать название дистрибутива Linux
        lsb_release -a (в строке Distributor ID)

    2. Продемонстрировать кодовое имя сборки Linux
        lsb_release -a (в строке Codename)

    3. Продемонстрировать версию интерпретатора Python3
        python3 -V

    4. Продемонстрировать версию библиотеки rospy
        rosversion rospy или pip3 show rospy

    5. Продемонстрировать температуру процессора в градусах (С)
        vcgencmd measure_temp

    6. Продемонстрировать версию пакета turtlebro
        rosversion turtlebro

    7. Продемонстрировать версию прошивки микроконтроллера материнской платы
        rosservice call /board_info {} (после строчки firmware)

    8. Продемонстрировать серийный номер системной платы робота (mcu_id)
        rosservice call /board_info {} (после строчки mcu_id)

    9. Продемонстрировать размер оперативной памяти (Kb)
        free (в строке Mem, total)

    10. Продемонстрировать текущий часовой пояс на роботе в формате “Time
zone:Continent/City (XXX, +XXXX)”

        	timedatectl (в строке Time zone)

    11. Продемонстрировать версию образа ОС, установленной на Raspberry Pi
          cd ../.. (перед $ должен появится /, что значит, что вы в корневом каталоге)

          sudo nano boot/version (откроется редактор nano с версией, по идее, 0.10a)

          Ctrl+X

	cd
A4. Проверка ROS процессов

    1. Продемонстрировать получение списка топиков на роботе
        rostopic list (сверить с топиками в мануале в разделе Параметры и настройка
        через launch, Работают топики)

    2. Продемонстрировать получение установленных ROS-пакетов
        rospack list или rospack list | cut -f6 -d'/' (сверить с пакетами в мануале в разделе 
        RaspberryPi, Установленное ПО на microSD карту)

А5. Проверка работы камеры

    1. Продемонстрировать наличие подключенной камеры в списке подключенных 
устройств /dev/…  путем выделения ее курсором мыши

        	ls /dev/video0

    2. Произвести физическое отключение и включение камеры на роботе
        Вытянуть USB шнур слева от выключателя робота и вставить обратно

        Перезагружаем робота командой sudo systemctl reboot, подключаемся к нему
        Если загорелся синий диод возле камеры - она включена

    3. Продемонстрировать работоспособность камеры
        IP РОБОТА:8080 (в браузере)

    4. Продемонстрировать получение данных о максимальном разрешении работы 
камеры

        	v4l2-ctl --list-formats-ext (строка Size: Discrete 1600x1200)

A6. Проверка одометрии колес

    2. Во время сдачи модуля необходимо

        2.1. Продемонстрировать проезд робота вперед по оси X и корректность 
отображения получаемой одометрии, в соответствии с осями направления 
робота

            Сбросить одометрию командой rosservice call /reset
            Посмотреть одометрию командой rostopic echo /odom
            Заставить двигаться вперёд по оси Х через web интерфейс (клавиша W)

        2.2. Продемонстрировать проезд робота назад по оси X и корректность 
отображения получаемой одометрии, в соответствии с осями направления 
робота
            
Заставить двигаться назад по оси Х через web интерфейс (клавиша S)

        2.3. Продемонстрировать сброс одометрии
            rosservice call /reset

        2.4. Продемонстрировать запуск робота на выполнение вращения влево по оси Z 
и корректность отображения получаемой одометрии, в соответствии с осями 
направления робота
            
Заставить поворачиваться влево через web интерфейс (клавиша A)

        2.5. Продемонстрировать запуск робота на выполнение вращения вправо по оси Z 
и корректность отображения получаемой одометрии, в соответствии с осями 
направления робота
            
Заставить поворачиваться вправо через web интерфейс (клавиша D)
            Остановить показ одометрии нажав Ctrl+C
            Сбросить одометрию командой rosservice call /reset

A7. Проверка состояния аккумуляторной батареи

        1. Продемонстрировать текущее напряжения батареи в соответствующем топике
            rostopic echo /bat -n 1 (в строке voltage)

        2. Продемонстрировать текущее состояния батареи в соответствующем топике
            rostopic echo /bat -n 1 (в строке power_supply_status)

A8. Проверка IMU датчика

    1. Продемонстрировать данные IMU датчика в соответствующем топике
        rostopic echo /imu

    2. Продемонстрировать проверку соответствия частоты обновления данных
IMU с документацией на робота

rostopic hz /imu (в строке average rate. Сверить со значением в мануале в 
разделе Доступные топики, Топик /imu)

	Ctrl+C


    3. Продемонстрировать корректную работу IMU датчика в rviz
        В терминале пк (команды можно найти в мануале, в разделе Подключение к ROS 
        на роботе)

export ROS_MASTER_URI=http://IP РОБОТА:11311

export ROS_HOSTNAME=IP КОМПЬЮТЕРА (IP можно узнать с помощью
команды hostname -I, IP начинается на 192.168.106.ХХХ)

rviz

        В Rviz
            В Fixed frame выставить base_link
            Через add добавить RobotModel, а через add, By topic, добавить Imu
        Закрываем Rviz

A9. Проверка МК Atmega
Необходимо использовать файлы из репозитория для задач Worldskills (https://github.com/voltbro/ws-sro)

    1. Проверка работоспособности светодиодной ленты и кнопок D22-D25

        1.1. Необходимо загрузить тестовую прошивку Turtlebro-tester. Для компиляции
скетча необходимо найти в менеджере библиотек Arduino IDE библиотеку 
FastLed и установить ее. Версия библиотеки должна быть не ниже 3.2.0
            
Запустить Arduino IDE командой arduino в терминале пк, во вкладке 
Инструменты открыть менеджер библиотек (Управлять библиотеками) или сочетанием клавиш Ctrl+Shift+I
В поисковике вбить Fastled и установить библиотеку FastLED, проверить её наличие во вкладке Скетч, Подключить библиотеку, FastLED
Во вкладке Инструменты, Плата, выбираем Arduino Mega or Mega 2560, закрываем Arduino
Заходим в github по ссылке, нажимаем на зелёную кнопку Code, скачиваем ZIP, 
открываем скачанный архив (ws-sro-main), распаковываем папку Turtlebro-tester, 
открываем её, запускаем файл Turtlebro-tester.ino
В коде, после строки void loop() копируем часть кода с if до второй закрытой 
фигурной скобки, после этой скобки делаем отступ, вставляем скопированный 
блок, заменяем число 22 на 25, и все 29 на 26
Проверяем код, нажав на галочку и в открывшемся окне нажимаем Сохранить
С помощью провода microUSB подключаем пк к роботу (разъём MEGA в задней 
части робота)
Сверху (меню Virtual Box), во вкладке Устройства, USB выбираем имя 
начинающееся на Silicon Labs
В Arduino открываем вкладку Инструменты, Порт, выбираем 
единственный доступный порт
Нажимаем в Arduino стрелочку (возле галочки), дожидаемся конца 
загрузки, вытаскиваем шнур, включаем на роботе диоды кнопкой D22 или D25
Закрываем Arduino

    2. Проверка связи микроконтроллера Atmega с ROS

        2.1. Необходимо загрузить тестовую прошивку TB-ros-tester. Для корректной 
компиляции программы, содержащей ROS-ноду на микроконтроллере нужно 
добавить в список библиотек Arduino дополнительную библиотеку ros_lib. 
Подробнее об этом написано в инструкции к роботу

В терминале пк
scp pi@IP РОБОТА:/home/pi/ros_lib_noetic.tar.gz /home/ИМЯ ЮЗЕРА/ros_lib_noetic.tar.gz

    Открываем архив ros_lib_noetic.tar.gz, распаковываем папку 
    ros_lib по пути Домашняя папка/snap/arduino/70/Arduino/libraries
    Открываем скачанный с github архив ws-sro-main и распаковываем папку 
    TB-ros-tester, заходим в неё и запускаем файл TB-ros-tester.ino
    В Arduino проверяем наличие библиотеки ros_lib во вкладке Скетч, 
    Подключить библиотеку
    Загружаем код на робота, как в пункте 1.1, но не изменяем содержимое

        2.2. Удостовериться в работоспособности тестовой прошивки и связи 
микроконтроллера Atmega с ROS

	В терминале робота
    rostopic list (сверху должен быть /arduino_connect_tester)

    rostopic echo /arduino_connect_tester (должно появиться data: “Test”)

Закрываем Arduino и останавливаем всё
                   Модуль 2. Поиск и устранение неисправностей.

 У каждого из участников будет та или иная техническая неисправность, которую необходимо устранить.
 Неисправности устраняются без вмешательсва в програмную часть робота (есть исключения).
Для успешной сдачи модуля необходимо убедиться, что все необходимые устройства подключены к матернинской плате робота 
 (лидар, двигатели, камера и т.п)

                   Модуль 3. Патрулирование полигона.

Открываем новый терминал, подключаемся к роботу
	Запускаем web интерфейс, проезжаем несколько раз по полигону, 
останавливаясь и записывая значения X, Y и угла поворота (от двух точек)
	Возвращаем робота на точку старта, останавливаем patrol_run через Ctrl+C

rosservice call /reset

	cd ~/catkin_ws/src/turtlebro_patrol/data

	sudo nano goals.xml

	Копируем строку, начинающуюся на <goal, вставляем её ниже. Одна строка - 
одна точка для патрулирования. После х, у и theta вписываем координаты для 
точек, которые записали ранее. После name пишем номера точек - 1, 2, 3 и т. д.
Выходим из редактора через Ctrl+S, Ctrl+X

    3. Продемонстрировать запуск пакета патрулирования
cd ..

	cd launch

	roslaunch patrol.launch

    4. Продемонстрировать работу патрулирования (не менее 2-х циклов), включая 
выполнения задания

        4.1. Начало патрулирования
            Открываем новый терминал, подключаемся к роботу

	rostopic pub /patrol(здесь можно нажать TAB, и подождать, пока команда заполнится)_control std(и здесь TAB)_msgs/String(и здесь) "data: ‘start'" (start в апострофах)
	Вся команда:
		rostopic pub /patrol_control std_msgs/String "data: ‘start'"

        4.2. Пауза в патрулировании
            rostopic pub /patrol_control std_msgs/String "data: ‘pause'"

        4.3. Возобновление патрулирования
            rostopic pub /patrol_control std_msgs/String "data: ‘resume'"

        4.4. Остановку патрулирования и завершение работы пакета патрулирования
            rostopic pub /patrol_control std_msgs/String "data: ‘shutdown'"


